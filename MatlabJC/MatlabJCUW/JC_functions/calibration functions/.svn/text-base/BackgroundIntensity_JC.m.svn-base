function PhotonFlux = BackgroundIntensity_JC(LEDType,NDF,calib,CellType) ;%This function will ask you for the calibrated value of the setting used, the%area of the spot, the NDF in the light path and the type of cell.  The function%will return a value for background light this corresponds to in equivalent 500 nm %photons.%%Created and pillaged from LEDCalibration by APS Sep. 03% edited by JC to use macaque spectra and new LED spectraSpotSize = 332000; % radius of spot = 325 for rig B and 290 for Rig A% load the spectra of the photoreceptorif strcmpi(CellType, 'rod');	load macaque-rod-spectra.mat	PhotoreceptorSpectra = MacaqueRodQuantalSpectra;elseif strcmpi(CellType, 'lcone')	load macaque-cone-spectra.mat	PhotoreceptorSpectra = MacaqueConeQuantalSpectra(:,[1,2]);elseif strcmpi(CellType, 'mcone');	load macaque-cone-spectra.mat	PhotoreceptorSpectra = MacaqueConeQuantalSpectra(:,[1,3]);elseif strcmpi(CellType, 'scone');	load macaque-cone-spectra.mat	PhotoreceptorSpectra = MacaqueConeQuantalSpectra(:,[1,4]);endStartWaveLen = 370;EndWaveLen = 720;StepWaveLen = 1;ReceptorSpectra = InterpolateNByTwo(PhotoreceptorSpectra, StartWaveLen, EndWaveLen, StepWaveLen);% Get spectra for LEDload RigBLEDSpectraif strcmpi(LEDType, 'red')	LEDQuantalSpectra(:, 1:2) = Spectra(:, [1,2]) ;elseif strcmpi(LEDType, 'green')	LEDQuantalSpectra(:, 1:2) = Spectra(:, [1,3]) ;elseif strcmpi(LEDType, 'blue')	LEDQuantalSpectra(:, 1:2) = Spectra(:, [1,4]) ;end% resample led spectra so they are at same points as photoreceptor spectraLEDSpectra = InterpolateNByTwo(LEDQuantalSpectra, StartWaveLen, EndWaveLen, StepWaveLen);% the spectral properties of each of the NDF filters for each LED% Load blue NDF spectra because I don't have the spectra on the other LEDs right now.load BlueNDF;NDFSpectra = ReceptorSpectra;if NDF == 0;	NDFSpectra(:, 2) = 1 ;endif NDF == 2;	if strcmpi(LEDType, 'red')		fprintf(1, 'Warning - no red ndf spectrum, using blue\n');		NDFSpectra = BlueNDFSpectra;		NDFSpectra(:,2) = NDFSpectra(:,2) * 0.01;			end	if strcmpi(LEDType, 'green')		fprintf(1, 'Warning - no green ndf spectrum, using blue\n');		NDFSpectra = BlueNDFSpectra;		NDFSpectra(:,2) = NDFSpectra(:,2) * 0.01;			end	if strcmpi(LEDType, 'brightgreen')		fprintf(1, 'Warning - no green ndf spectrum, using blue\n');		NDFSpectra = BlueNDFSpectra;		NDFSpectra(:,2) = NDFSpectra(:,2) * 0.01;			end	if strcmpi(LEDType, 'blue')		NDFSpectra = BlueNDFSpectra;		NDFSpectra(:,2) = NDFSpectra(:,2) * 0.01;	endendTempNDFSpectra = InterpolateNByTwo(NDFSpectra, StartWaveLen, EndWaveLen, StepWaveLen);clear NDFSpectraNDFSpectra = TempNDFSpectra;% --------------------------------------------------------------------------------------------------% Computes the photon flux%--------------------------------------------------------------------------------------------------			% convert quantal LED spectra to energy spectra and apply udt factors, then convert back to quantal spectra, % now in absolute unitsScFact = 6.63e-34 * 3e8; % Planks constant * speed of lightLEDEnergySpectra = LEDSpectra;LEDEnergySpectra(:, 2) = LEDSpectra(:, 2) ./ LEDSpectra(:, 1);LEDPow = sum(LEDEnergySpectra(:, 2)) * (LEDEnergySpectra(2, 1) - LEDEnergySpectra(1, 1));LEDEnergySpectra(:, 2) = LEDEnergySpectra(:, 2) * calib * 1e-9 / LEDPow;%1e-9 here puts the answer into WattsLEDSpectra(:, 2) = LEDEnergySpectra(:, 2) .* LEDEnergySpectra(:, 1) * 1e-9 / (ScFact * SpotSize);%1e-9 here converts wavelength to meters% figure% subplot(3,1,1)% plot(LEDSpectra(:,1), LEDSpectra(:,2), 'b')% title('LEDType')% subplot(3,1,2)% plot(ReceptorSpectra(:,1), ReceptorSpectra(:,2), 'r')% subplot(3,1,3)% plot(NDFSpectra(:,1), NDFSpectra(:,2), 'g')% pause% multiply LED spectra by photoreceptor spectraPhotonFlux = sum(LEDSpectra(:, 2) .* ReceptorSpectra(:, 2) .* NDFSpectra(:, 2)) ;