function ForIgor = ValtAnalyzer(Input,Parameters,id,A) ; 
% this function will analyze alternate voltage exp
% JC 2/9/09 adapted from earlier version

% Cells for analysis

% Input(1).cellname = '101907Bc1' ; % good patch, but identity was questioned
% Input(1).AltV = '[140,146,152,158,164]' ; % alternating voltages
% Input(1).HoldExc = '[142,148,154,160,166]' ; % Exc isolation hold
% Input(1).HoldInh = '[144,150,156,162,168]' ; % inh isolation hold
% 
% Input(2).cellname = '020609Ec1' ;
% Input(2).AltV = '[182:3:194]' ;
% Input(2).HoldExc = '[180:3:194]' ;
% Input(2).HoldInh = '[181:3:194]' ;

% get data
[fp, error] = ITCInitializeAnalysis(1000000, ['~/Data/primate/',Input(A).cellname]);

epochs = str2num(Input(A).(id)) ;
round = 0 ;
for a = 1:3:length(epochs) ; % for each spike epoch
    round = round +1 ;

    [dataExc(round,:), error] = ITCReadEpoch(epochs(a), 0, fp) ;    % get data

    [dataInh(round,:), error] = ITCReadEpoch(epochs(a+1), 0, fp) ;    % get data
    
    [dataAltV(round,:), error] = ITCReadEpoch(epochs(a+2), 0, fp) ;    % get data
    [SI(round), error] = ITCGetSamplingInterval(epochs(a+2), fp); % get sampling interval
    SI(round) = SI(round) * 1e-6; % Sampling interval in sec
end



cyclepnts = 100 ; % number of sample points in a cycle, pnts between leaving hold1 and returning (Also gets rid of first cycle)    
FirstAltPnt = (cyclepnts/2) - 1 ; % first sample point you want to plot after begining of step from alternation 
%FirstAltPnt = 30 ;
LastAltPnt = FirstAltPnt ;  % last "                                                                    "

[prePnts, error] = ITCGetStmPrePts(epochs(1), 0, 0, fp) ; % points collected beyond which data is not worth analyzing
[postPnts, error] = ITCGetStmTailPts(epochs(1), 0, 0, fp) ;

samplerate = 1/SI(1) ; % Hz at which data was collected
time = [SI(1):SI(1):SI(1)*length(dataExc(1,:))] ; % time vector in seconds

% WINDOWING ALTERNATING V DATA
Alt_Exc = NaN(size(dataAltV)) ; % make a vector of NaNs that will serve as base for ploting alternating coductances at hold1
Alt_Inh = NaN(size(dataAltV)) ; % make a vector of NaNs that will serve as base for ploting alternating coductances at hold2_

for a = FirstAltPnt:LastAltPnt ;        % for each data point per cycle we want to plot
    Alt_Exc(:,[a:cyclepnts:end]) = dataAltV(:,[a:cyclepnts:end]) ; 
    Alt_Inh(:,[a+cyclepnts/2:cyclepnts:end]) = dataAltV(:,[a+cyclepnts/2:cyclepnts:end]) ; 
end 

% change currents into G and interplate the alt recordings
for a = 1:size(dataExc,1) ; % for each trial
    GExc(a,:) = dataExc(a,:)/-61 - min(dataExc(a,:)/-61) ; % get conductance from stable currrents
    GInh(a,:) = dataInh(a,:)/61 - min(dataInh(a,:)/61) ; 
    GAlt_Exc(a,:) = Alt_Exc(a,:)/-61 - min(Alt_Exc(a,:)/-61) ; % get conductance from alt current
    GAlt_Inh(a,:) = Alt_Inh(a,:)/61 - min(Alt_Inh(a,:)/61) ;

    b = find(isnan(GAlt_Exc(a,:)) == 0) ;     % find all the indices that are not nans
    GAlt_ExcInt(a,:) = interp1(b,GAlt_Exc(a,b),[1:length(GAlt_Exc)],'linear','extrap') ; % interpolate to find values that were not sampled
    clear b
    
    b = find(isnan(GAlt_Inh(a,:)) == 0) ;     % find all the indices that are not nans
    GAlt_InhInt(a,:) = interp1(b,GAlt_Inh(a,b),[1:length(GAlt_Inh)],'linear','extrap') ; % interpolate to find values that were not sampled
    clear b

end

% low pass filter to remove electrical crap
GExc_lpf = lowPassFilter(GExc, samplerate, 5000) ; %(signal,samplerate,cutoff frequ (hz))
GInh_lpf = lowPassFilter(GInh, samplerate, 5000) ; 
GAlt_ExcInt_lpf = lowPassFilter(GAlt_ExcInt, samplerate, 5000) ;
GAlt_InhInt_lpf = lowPassFilter(GAlt_InhInt, samplerate, 5000) ;

% high pass filter to remove slow drift 
GExc_hpf = highPassFilter(GExc_lpf, samplerate, 1) ; %(signal,samplerate,cutoff frequ (hz))
GInh_hpf = highPassFilter(GInh_lpf, samplerate, 1) ; 
GAlt_ExcInt_hpf = highPassFilter(GAlt_ExcInt_lpf, samplerate, 1) ;
GAlt_InhInt_hpf = highPassFilter(GAlt_InhInt_lpf, samplerate, 1) ;

% get mean data
GAlt_ExcInt_hpf_Mean = mean(GAlt_ExcInt_hpf) ;
GAlt_InhInt_hpf_Mean = mean(GAlt_InhInt_hpf) ;

GExc_hpf_Mean = mean(GExc_hpf) ;
GInh_hpf_Mean = mean(GInh_hpf) ;

% get residuals
for a= 1:size(GExc,1) ;
    GExc_hpf_Res(a,:) =  GExc_hpf(a,:) - GExc_hpf_Mean ;
    GInh_hpf_Res(a,:) =  GInh_hpf(a,:) - GInh_hpf_Mean ;
    GAlt_ExcInt_hpf_Res(a,:) = GAlt_ExcInt_hpf(a,:) - GAlt_ExcInt_hpf_Mean ;
    GAlt_InhInt_hpf_Res(a,:) = GAlt_InhInt_hpf(a,:) - GAlt_InhInt_hpf_Mean ;
end

% get cross correlations (avoid first 3sec because of oscillations from highpass filtering) 
start = floor(3/SI(1)) ; % 3seconds in points
for a= 1:size(GExc,1) ;
    ccAltPre(a,:) = xcov(GAlt_ExcInt_hpf(a,start:prePnts),GAlt_InhInt_hpf(a,start:prePnts),'coef') ; %cross corr of alternating g exc and inh prepoints 
    ccPre(a,:) = xcov(GExc_hpf(a,start:prePnts),GInh_hpf(a,start:prePnts),'coef') ; % cross corr of single hold g exc and inh prepoints
        
    ccAltRes(a,:) = xcov(GAlt_ExcInt_hpf_Res(a,prePnts:end-postPnts),GAlt_InhInt_hpf_Res(a,prePnts:end-postPnts),'coef') ; % cross corr of alternating g exc and inh stimulus residuals
    ccRes(a,:) = xcov(GExc_hpf_Res(a,prePnts:end-postPnts),GInh_hpf_Res(a,prePnts:end-postPnts),'coef') ; % cross corr of single hold g exc and inh stimulus residuals    

    acExcPre(a,:) = xcov(GExc_hpf(a,start:prePnts),'coef') ; % auttocorrelation of prestim exc single hold
    acInhPre(a,:) = xcov(GInh_hpf(a,start:prePnts),'coef') ; % auttocorrelation of prestim exc single hold
    
    % cc of shuffled simultaneous recordings
    if a~=size(GExc,1) ; % if your not on the last trace
        ccAltPre_shuf(a,:) = xcov(GAlt_ExcInt_hpf(a,start:prePnts),GAlt_InhInt_hpf(a+1,start:prePnts),'coef') ;
        ccAltRes_shuf(a,:) = xcov(GAlt_ExcInt_hpf_Res(a,prePnts:end-postPnts),GAlt_InhInt_hpf_Res(a+1,prePnts:end-postPnts),'coef') ;
    else
        ccAltPre_shuf(a,:) = xcov(GAlt_ExcInt_hpf(a,start:prePnts),GAlt_InhInt_hpf(1,start:prePnts),'coef') ;
        ccAltRes_shuf(a,:) = xcov(GAlt_ExcInt_hpf_Res(a,prePnts:end-postPnts),GAlt_InhInt_hpf_Res(1,prePnts:end-postPnts),'coef') ;
    end

end

ccAlt_Mean = xcov(GAlt_ExcInt_hpf_Mean(1,prePnts:end-postPnts),GAlt_InhInt_hpf_Mean(1,prePnts:end-postPnts),'coef') ; % cross corr of alternating g exc and inh stimulus mean
cc_Mean = xcov(GExc_hpf_Mean(1,prePnts:end-postPnts),GInh_hpf_Mean(1,prePnts:end-postPnts),'coef') ; % cross corr of single hold g exc and inh stimulus mean

%mean cross corr 
ccAltPre_Mean = mean(ccAltPre) ;
ccPre_Mean = mean(ccPre) ;
ccAltPre_shuf_Mean = mean(ccAltPre_shuf) ;

ccAltRes_Mean = mean(ccAltRes) ;
ccRes_Mean = mean(ccRes) ;
ccAltRes_shuf_Mean = mean(ccAltRes_shuf) ;

acExcPre_Mean = mean(acExcPre) ;
acInhPre_Mean = mean(acInhPre) ;

%time vectors for cc
time_ccPre = [SI(1)*([1:length(ccPre_Mean)] - (length(ccPre_Mean)+1)/2)] ; 
time_cc = [SI(1)*([1:length(cc_Mean)] - (length(cc_Mean)+1)/2)] ;

%peak and lag of cc
[ccAltPre_Peak,ccAltPre_Peaki] = max(ccAltPre_Mean) ;
[ccPre_Peak,ccPre_Peaki] = max(ccPre_Mean) ;
[ccAltPre_shuf_Peak,ccAltPre_shuf_Peaki] = max(ccAltPre_shuf_Mean) ;

[ccAltRes_Peak,ccAltRes_Peaki] = max(ccAltRes_Mean) ;
[ccRes_Peak,ccRes_Peaki] = max(ccRes_Mean) ;
[ccAltRes_shuf_Peak,ccAltRes_shuf_Peaki] = max(ccAltRes_shuf_Mean) ;

[ccAlt_Peak,ccAlt_Peaki] = max(ccAlt_Mean) ;
[cc_Peak,cc_Peaki] = max(cc_Mean) ;

ccAltPre_Lag = time_ccPre(ccAltPre_Peaki) ; 
ccPre_Lag= time_ccPre(ccPre_Peaki) ;
ccAltPre_shuf_Lag= time_ccPre(ccAltPre_shuf_Peaki) ;

ccAltRes_Lag= time_cc(ccAltRes_Peaki) ;
ccRes_Lag= time_cc(ccRes_Peaki) ;
ccAlt_Lag= time_cc(ccAlt_Peaki) ;
cc_Lag= time_cc(cc_Peaki) ;
ccAltRes_shuf_Lag= time_cc(ccAltRes_shuf_Peaki) ;


% error (mean squared) between single hold and alternating mean 
GExcError_mean = sum((GExc_hpf_Mean(prePnts:end-postPnts) - GAlt_ExcInt_hpf_Mean(prePnts:end-postPnts)).^2) ; 
GInhError_mean = sum((GInh_hpf_Mean(prePnts:end-postPnts) - GAlt_InhInt_hpf_Mean(prePnts:end-postPnts)).^2) ;

for a= 1:size(GExc,1) ; % for each trace
    GExcError(a) = sum((GExc_hpf_Mean(prePnts:end-postPnts) - GAlt_ExcInt_hpf(a,prePnts:end-postPnts)).^2) ; % difference between single hold mean and an individual alternating hold
    GInhError(a) = sum((GInh_hpf_Mean(prePnts:end-postPnts) - GAlt_InhInt_hpf_Mean(prePnts:end-postPnts)).^2) ; 

    GExcError_sh(a) = sum((GExc_hpf_Mean(prePnts:end-postPnts) - GExc_hpf(a,prePnts:end-postPnts)).^2) ; % difference between single hold mean and an individual singl hold 
    GInhError_sh(a) = sum((GInh_hpf_Mean(prePnts:end-postPnts) - GInh_hpf(a,prePnts:end-postPnts)).^2) ; 
end

% sample single hold as if it were sampled like alt hold 
GExc_rs = GExc_hpf(:,[FirstAltPnt:cyclepnts:end]) ; % resamples
GInh_rs = GInh_hpf(:,[FirstAltPnt+cyclepnts/2:cyclepnts:end]) ;

for a= 1:size(GExc,1) ; % for each trace
    GExc_rsi(a,:) = interp1([FirstAltPnt:cyclepnts:length(GExc_hpf)],GExc_rs(a,:),[1:length(GAlt_Exc)],'linear','extrap') ; % resampled and interpolated
    GInh_rsi(a,:) = interp1([FirstAltPnt:cyclepnts:length(GInh_hpf)],GInh_rs(a,:),[1:length(GAlt_Exc)],'linear','extrap') ; % 
end

GExc_rsi_Mean = mean(GExc_rsi) ;
GInh_rsi_Mean = mean(GInh_rsi) ;

% get time depedant standard deviation
GAlt_ExcInt_hpf_std = std(GAlt_ExcInt_hpf) ;
GAlt_InhInt_hpf_std = std(GAlt_InhInt_hpf) ;

GExc_hpf_std = std(GExc_hpf) ;
GInh_hpf_std = std(GInh_hpf) ;

GExc_rsi_std = std(GExc_rsi) ;
GInh_rsi_std = std(GInh_rsi) ;


% variance (amplitude) of each G trace
for a= 1:size(GExc,1) ; % for each trace
    GExc_hpf_rms(a) = var(GExc_hpf(a,prePnts:end-postPnts)) ; 
    GInh_hpf_rms(a) = var(GInh_hpf(a,prePnts:end-postPnts)) ;
    
    GExc_rsi_rms(a) = var(GExc_rsi(a,prePnts:end-postPnts)) ; 
    GInh_rsi_rms(a) = var(GInh_rsi(a,prePnts:end-postPnts)) ;
    
    GAlt_ExcInt_hpf_rms(a) = var(GAlt_ExcInt_hpf(a,prePnts:end-postPnts)) ;
    GAlt_InhInt_hpf_rms(a) = var(GAlt_InhInt_hpf(a,prePnts:end-postPnts)) ;
    
    GExcPre_hpf_rms(a) = var(GExc_hpf(a,start:prePnts)) ; 
    GInhPre_hpf_rms(a) = var(GInh_hpf(a,start:prePnts)) ;
    
    GExcPre_rsi_rms(a) = var(GExc_rsi(a,start:prePnts)) ; 
    GInhPre_rsi_rms(a) = var(GInh_rsi(a,start:prePnts)) ;
    
    GAltPre_ExcInt_hpf_rms(a) = var(GAlt_ExcInt_hpf(a,start:prePnts)) ;
    GAltPre_InhInt_hpf_rms(a) = var(GAlt_InhInt_hpf(a,start:prePnts)) ;
        
end

% compare mean and variance of single hold and alternating hold by getting
% the correlation coefficient and fiting a straight line to plots

[MeanExcCorr,MeanExcCorrP] = corrcoef([GExc_hpf_Mean(prePnts:end-postPnts)',GAlt_ExcInt_hpf_Mean(prePnts:end-postPnts)',GExc_rsi_Mean(prePnts:end-postPnts)']) ; % corelation coef exc sh mean and exc alt mean (3x3 matrix)
[MeanInhCorr,MeanInhCorrP] = corrcoef([GInh_hpf_Mean(prePnts:end-postPnts)',GAlt_InhInt_hpf_Mean(prePnts:end-postPnts)',GInh_rsi_Mean(prePnts:end-postPnts)']) ; % inh

[StdExcCorr,StdExcCorrP] = corrcoef([GExc_hpf_std(prePnts:end-postPnts)',GAlt_ExcInt_hpf_std(prePnts:end-postPnts)',GExc_rsi_std(prePnts:end-postPnts)']) ; % correlation coef of exc sh var and exc alt var
[StdInhCorr,StdInhCorrP] = corrcoef([GInh_hpf_std(prePnts:end-postPnts)',GAlt_InhInt_hpf_std(prePnts:end-postPnts)',GInh_rsi_std(prePnts:end-postPnts)']) ; % inh

MeanExcFitParams = nlinfit(GExc_hpf_Mean(prePnts:end-postPnts),GAlt_ExcInt_hpf_Mean(prePnts:end-postPnts),@StraightLineFit,[1,0]) ; % straight line fit comparing sh mean and alt mean
MeanInhFitParams = nlinfit(GInh_hpf_Mean(prePnts:end-postPnts),GAlt_InhInt_hpf_Mean(prePnts:end-postPnts),@StraightLineFit,[1,0]) ;

MeanExcRsiFitParams = nlinfit(GExc_rsi_Mean(prePnts:end-postPnts),GAlt_ExcInt_hpf_Mean(prePnts:end-postPnts),@StraightLineFit,[1,0]) ; % straight line fit comparing sh rsi mean and alt mean
MeanInhRsiFitParams = nlinfit(GInh_rsi_Mean(prePnts:end-postPnts),GAlt_InhInt_hpf_Mean(prePnts:end-postPnts),@StraightLineFit,[1,0]) ;

StdExcFitParams = nlinfit(GExc_hpf_std(prePnts:end-postPnts),GAlt_ExcInt_hpf_std(prePnts:end-postPnts),@StraightLineFit,[1,0]) ;
StdInhFitParams = nlinfit(GInh_hpf_std(prePnts:end-postPnts),GAlt_InhInt_hpf_std(prePnts:end-postPnts),@StraightLineFit,[1,0]) ;
   
StdExcRsiFitParams = nlinfit(GExc_rsi_std(prePnts:end-postPnts),GAlt_ExcInt_hpf_std(prePnts:end-postPnts),@StraightLineFit,[1,0]) ;
StdInhRsiFitParams = nlinfit(GInh_rsi_std(prePnts:end-postPnts),GAlt_InhInt_hpf_std(prePnts:end-postPnts),@StraightLineFit,[1,0]) ;

% power spectrums
[powerspec_xvalues, mean_powerspecExc] = PowerSpectrumFinder(GExc_hpf_Mean(:,prePnts:end-postPnts),samplerate) ; % mean single hold
[powerspec_xvalues, mean_powerspecInh] = PowerSpectrumFinder(GInh_hpf_Mean(:,prePnts:end-postPnts),samplerate) ;

unresolvable = find(powerspec_xvalues>(1/(2*cyclepnts*SI(1)))) ; % idicies of powerspec which we cannot assess with alt V (theoretical)

[powerspec_xvalues, mean_powerspecAltExc] = PowerSpectrumFinder(GAlt_ExcInt_hpf_Mean(:,prePnts:end-postPnts),samplerate) ; % mean alternanting hold
[powerspec_xvalues, mean_powerspecAltInh] = PowerSpectrumFinder(GAlt_InhInt_hpf_Mean(:,prePnts:end-postPnts),samplerate) ;
mean_powerspecAltExc(unresolvable) = 0 ; % get rid of frequencies that are unresovable
mean_powerspecAltInh(unresolvable) = 0 ; 

[powerspec_xvalues, mean_powerspecExcRes] = PowerSpectrumFinder(GExc_hpf_Res(:,prePnts:end-postPnts),samplerate) ; % residual single hold
[powerspec_xvalues, mean_powerspecInhRes] = PowerSpectrumFinder(GInh_hpf_Res(:,prePnts:end-postPnts),samplerate) ;

[powerspec_xvalues, mean_powerspecAltExcRes] = PowerSpectrumFinder(GAlt_ExcInt_hpf_Res(:,prePnts:end-postPnts),samplerate) ; % residual alt hold
[powerspec_xvalues, mean_powerspecAltInhRes] = PowerSpectrumFinder(GAlt_InhInt_hpf_Res(:,prePnts:end-postPnts),samplerate) ;
mean_powerspecAltExcRes(unresolvable) = 0 ; % get rid of frequencies that are unresovable
mean_powerspecAltInhRes(unresolvable) = 0 ;

Frac_powerspecShAltExc = mean_powerspecAltExc./mean_powerspecExc ;   % fraction of variance mean alt captures at each frequency
Frac_powerspecShAltInh = mean_powerspecAltInh./mean_powerspecInh ;

Frac_powerspecShAltExcRes = mean_powerspecAltExcRes./mean_powerspecExcRes ;   % fraction of variance residual alt captures at each frequency
Frac_powerspecShAltInhRes = mean_powerspecAltInhRes./mean_powerspecInhRes ;

FracAssessed_Exc = 1-(sum(mean_powerspecExc - mean_powerspecAltExc)/sum(mean_powerspecExc)) ; % total fraction of variance mean alt captures
FracAssessed_Inh = 1-(sum(mean_powerspecInh - mean_powerspecAltInh)/sum(mean_powerspecInh)) ;

FracAssessed_ExcRes = 1-(sum(mean_powerspecExcRes - mean_powerspecAltExcRes)/sum(mean_powerspecExcRes)) ; % total fraction of variance residual alt captures
FracAssessed_InhRes = 1-(sum(mean_powerspecInhRes - mean_powerspecAltInhRes)/sum(mean_powerspecInhRes)) ;

% transfer function from single hold to alt
[LinearFilter] = LinFilterFinder(GExc_hpf(a,prePnts:end-postPnts),GAlt_ExcInt_hpf(a,prePnts:end-postPnts), samplerate, samplerate) ;
[tf_x,Exc_TransFnc] = PowerSpectrumFinder(LinearFilter,samplerate) ;

[LinearFilter] = LinFilterFinder(GInh_hpf(a,prePnts:end-postPnts),GAlt_InhInt_hpf(a,prePnts:end-postPnts), samplerate, samplerate) ;
[tf_x,Inh_TransFnc] = PowerSpectrumFinder(LinearFilter,samplerate) ;

% % figures
% 
% figure % example alternating I exctraction
% plot(time,dataAltV(3,:))
% hold on
% plot(time,Alt_Exc(3,:),'g*')
% plot(time,Alt_Inh(3,:),'r*')
% xlabel('time (seconds)')
% ylabel('current (pA)')
% title('alternating extraction')
% 
% figure % individual example
% subplot(2,1,1)
% plot(time,GExc_hpf(3,:),'g')
% hold on
% plot(time,GAlt_ExcInt_hpf(3,:),'g--')
% title('individual comparisons')
% 
% subplot(2,1,2)
% plot(time,GInh_hpf(3,:),'r')
% hold on
% plot(time,GAlt_InhInt_hpf(3,:),'r--')
% xlabel('time (seconds)')
% ylabel('conductance (nS)')
% 
% 
% figure % individual examples of alternating hold responses
% for a=1:size(GExc,1) ;
%     subplot(size(GExc,1),1,a)
%     plot(time,GAlt_ExcInt_hpf(a,:),'g')
%     hold on
%     plot(time,GAlt_InhInt_hpf(a,:),'r')
% end
% xlabel('time (seconds)')
% ylabel('conductance (nS)')
% title('individual alternating')
% 
% figure % individual examples of single hold response
% for a=1:size(GExc,1) ;
%     subplot(size(GExc,1),1,a)
%     plot(time,GExc_hpf(a,:),'g')
%     hold on
%     plot(time,GInh_hpf(a,:),'r')
% end
% xlabel('time (seconds)')
% ylabel('conductance (nS)')
% title('individual single hold')
% 
% figure % individual examples of alternating hold residuals
% for a=1:size(GExc,1) ;
%     subplot(size(GExc,1),1,a)
%     plot(time,GAlt_ExcInt_hpf_Res(a,:),'g')
%     hold on
%     plot(time,GAlt_InhInt_hpf_Res(a,:),'r')
% end
% xlabel('time (seconds)')
% ylabel('conductance (nS)')
% title('individual alternating residuals')
% 
% figure % individual examples of single hold residuals
% for a=1:size(GExc,1) ;
%     subplot(size(GExc,1),1,a)
%     plot(time,GExc_hpf_Res(a,:),'g')
%     hold on
%     plot(time,GInh_hpf_Res(a,:),'r')
% end
% xlabel('time (seconds)')
% ylabel('conductance (nS)')
% title('individual single hold residuals')

figure % variance
subplot(1,5,1:3)
plot(time,GExc_hpf_std,'g')
hold on
plot(time,GInh_hpf_std,'r')
plot(time,GAlt_ExcInt_hpf_std,'g--')
plot(time,GAlt_InhInt_hpf_std,'r--')
xlabel('time (seconds)')
ylabel('conductance (nS)')
title('std conductances')

subplot(1,5,4)
plot(GExc_hpf_std(prePnts:end-postPnts),GAlt_ExcInt_hpf_std(prePnts:end-postPnts),'b.')
hold on
plot(GExc_rsi_std(prePnts:end-postPnts),GAlt_ExcInt_hpf_std(prePnts:end-postPnts),'y.')
plot(GExc_hpf_std(prePnts:end-postPnts),StdExcFitParams(1)*GExc_hpf_std(prePnts:end-postPnts)+StdExcFitParams(2),'b')
plot(GExc_rsi_std(prePnts:end-postPnts),StdExcRsiFitParams(1)*GExc_rsi_std(prePnts:end-postPnts)+StdExcRsiFitParams(2),'y')
plot([min(GExc_hpf_std(prePnts:end-postPnts)),max(GExc_hpf_std(prePnts:end-postPnts))],[min(GExc_hpf_std(prePnts:end-postPnts)),max(GExc_hpf_std(prePnts:end-postPnts))],'k-')
text(.1,.8,['exc sh= ',num2str(StdExcCorr(1,2))],'Units','norm')
text(.1,.7,['exc rsi= ',num2str(StdExcCorr(2,3))],'Units','norm')
xlabel('exc sh or exc sh rsi (nS)')
ylabel('exc alt (nS)')
title('exc comparison')

subplot(1,5,5)
plot(GInh_hpf_std(prePnts:end-postPnts),GAlt_InhInt_hpf_std(prePnts:end-postPnts),'b.')
hold on
plot(GInh_rsi_std(prePnts:end-postPnts),GAlt_InhInt_hpf_std(prePnts:end-postPnts),'y.')
plot(GInh_hpf_std(prePnts:end-postPnts),StdInhFitParams(1)*GInh_hpf_std(prePnts:end-postPnts)+StdInhFitParams(2),'b')
plot(GInh_rsi_std(prePnts:end-postPnts),StdInhRsiFitParams(1)*GInh_rsi_std(prePnts:end-postPnts)+StdInhRsiFitParams(2),'y')
plot([min(GInh_hpf_std(prePnts:end-postPnts)),max(GInh_hpf_std(prePnts:end-postPnts))],[min(GInh_hpf_std(prePnts:end-postPnts)),max(GInh_hpf_std(prePnts:end-postPnts))],'k')
text(.1,.8,['inh sh= ',num2str(StdInhCorr(1,2))],'Units','norm')
text(.1,.7,['inh rsi= ',num2str(StdInhCorr(2,3))],'Units','norm')
xlabel('inh sh or inh sh rsi (nS)')
ylabel('inh alt (nS)')
title('inh comparison')


% figure % mean traces
% subplot(1,5,1:3)
% plot(time,GExc_hpf_Mean,'g')
% hold on
% plot(time,GInh_hpf_Mean,'r')
% plot(time,GAlt_ExcInt_hpf_Mean,'g--')
% plot(time,GAlt_InhInt_hpf_Mean,'r--')
% text(3,10,['exc= ',num2str(GExcError_mean)])
% text(3,8,['inh= ',num2str(GInhError_mean)])
% xlabel('time (seconds)')
% ylabel('conductance (nS)')
% title('mean conductances')
% 
% subplot(1,5,4)
% plot(GExc_hpf_Mean(prePnts:end-postPnts),GAlt_ExcInt_hpf_Mean(prePnts:end-postPnts),'b.')
% hold on
% plot(GExc_rsi_Mean(prePnts:end-postPnts),GAlt_ExcInt_hpf_Mean(prePnts:end-postPnts),'y.')
% plot(GExc_hpf_Mean(prePnts:end-postPnts),MeanExcFitParams(1)*GExc_hpf_Mean(prePnts:end-postPnts)+MeanExcFitParams(2),'b')
% plot(GExc_rsi_Mean(prePnts:end-postPnts),MeanExcRsiFitParams(1)*GExc_rsi_Mean(prePnts:end-postPnts)+MeanExcRsiFitParams(2),'y')
% plot([min(GExc_hpf_Mean(prePnts:end-postPnts)),max(GExc_hpf_Mean(prePnts:end-postPnts))],[min(GExc_hpf_Mean(prePnts:end-postPnts)),max(GExc_hpf_Mean(prePnts:end-postPnts))],'k')
% text(.1,.8,['exc sh= ',num2str(MeanExcCorr(1,2))],'Units','norm')
% text(.1,.7,['exc rsi= ',num2str(MeanExcCorr(2,3))],'Units','norm')
% xlabel('exc sh or exc sh rsi (nS)')
% ylabel('exc alt (nS)')
% title('exc comparison')
% 
% subplot(1,5,5)
% plot(GInh_hpf_Mean(prePnts:end-postPnts),GAlt_InhInt_hpf_Mean(prePnts:end-postPnts),'b.')
% hold on
% plot(GInh_rsi_Mean(prePnts:end-postPnts),GAlt_InhInt_hpf_Mean(prePnts:end-postPnts),'y.')
% plot(GInh_hpf_Mean(prePnts:end-postPnts),MeanInhFitParams(1)*GInh_hpf_Mean(prePnts:end-postPnts)+MeanInhFitParams(2),'b')
% plot(GInh_rsi_Mean(prePnts:end-postPnts),MeanInhRsiFitParams(1)*GInh_rsi_Mean(prePnts:end-postPnts)+MeanInhRsiFitParams(2),'y')
% plot([min(GInh_hpf_Mean(prePnts:end-postPnts)),max(GInh_hpf_Mean(prePnts:end-postPnts))],[min(GInh_hpf_Mean(prePnts:end-postPnts)),max(GInh_hpf_Mean(prePnts:end-postPnts))],'k')
% text(.1,.8,['inh sh= ',num2str(MeanInhCorr(1,2))],'Units','norm')
% text(.1,.7,['inh rsi= ',num2str(MeanInhCorr(2,3))],'Units','norm')
% xlabel('inh sh or inh sh rsi (nS)')
% ylabel('inh alt (nS)')
% title('inh comparison')

% figure % mean traces using resampled single hold
% plot(time,GExc_rsi_Mean,'g')
% hold on
% plot(time,GInh_rsi_Mean,'r')
% plot(time,GAlt_ExcInt_hpf_Mean,'g--')
% plot(time,GAlt_InhInt_hpf_Mean,'r--')
% text(3,10,['exc= ',num2str(GExcError_mean)])
% text(3,8,['inh= ',num2str(GInhError_mean)])
% xlabel('time (seconds)')
% ylabel('conductance (nS)')
% title('mean conductances (resampled)')
% 
% 
% figure % rms (amplitude) of Gtraces
% plot(1,GExc_hpf_rms,'g*')
% hold on
% plot(1,GInh_hpf_rms,'r*')
% plot(2,GExc_rsi_rms,'g*')
% plot(2,GInh_rsi_rms,'r*')
% plot(3,GAlt_ExcInt_hpf_rms,'g*')
% plot(3,GAlt_InhInt_hpf_rms,'r*')
% a = gca ;
% set(a,'XTick',[1:3]) ;
% set(a,'XTickLabel',['sh    ';'sh rsi';'alt   ']) ;
% 
% figure % cross correlations
% plot(time_ccPre,ccAltPre_Mean)
% hold on
% plot(time_ccPre,ccPre_Mean,'r')
% plot(time_cc,ccAltRes_Mean,'g')
% plot(time_cc,ccRes_Mean,'y')
% plot(time_cc,ccAlt_Mean,'k')
% plot(time_cc,cc_Mean,'c')
% plot(time_ccPre,ccAltPre_shuf_Mean,'b--')
% plot(time_cc,ccAltRes_shuf_Mean,'g--')
% plot(time_ccPre,acExcPre_Mean,'b:')
% plot(time_ccPre,acInhPre_Mean,'r:')
% legend('alternating prestim','single hold prestim','alternating residual','single hold residuals','alternating meanG stimulus','single hold meanG stimulus','alt prestim shuffled','alt resid shuffled','autocorr sh exc','autocorr sh inh') 
% title('cross correlations')
% xlabel('time (seconds)')
% ylabel('fraction shared')
% 
% plot(ccAltPre_Lag,ccAltPre_Peak,'b*') 
% plot(ccPre_Lag,ccPre_Peak,'r*') 
% plot(ccAltRes_Lag,ccAltRes_Peak,'g*') 
% plot(ccRes_Lag,ccRes_Peak,'y*')
% plot(ccAlt_Lag,ccAlt_Peak,'k*')
% plot(cc_Lag,cc_Peak,'c*')
% 
% figure % individual cross correlations
% subplot(2,2,1)
% plot(time_ccPre,ccAltPre,'b')
% hold on
% plot(time_ccPre, ccAltPre_Mean,'b','Linewidth',2)
% plot(time_ccPre,ccPre,'r')
% plot(time_ccPre, ccPre_Mean,'r','Linewidth',2)
% axis([-.1 .1 -.5 1])
% title('preStim')
% xlabel('time (seconds)')
% ylabel('fraction shared')
% 
% subplot(2,2,2)
% plot(time_cc,ccAltRes,'b')
% hold on
% plot(time_cc, ccAltRes_Mean,'b','Linewidth',2)
% plot(time_cc,ccRes,'r')
% plot(time_cc, ccRes_Mean,'r','Linewidth',2)
% axis([-.1 .1 -.5 1])
% title('Residuals')
% xlabel('time (seconds)')
% ylabel('fraction shared')
% 
% subplot(2,2,3)
% plot(time_cc, ccAlt_Mean,'b','Linewidth',2)
% hold on
% plot(time_cc, cc_Mean,'r','Linewidth',2)
% axis([-.1 .1 -.5 1])
% title('Stimulus mean')
% xlabel('time (seconds)')
% ylabel('fraction shared')
% 
% subplot(2,2,4)
% plot(time_ccPre,ccAltPre_shuf,'y')
% hold on
% plot(time_ccPre,ccAltPre_shuf_Mean,'y','Linewidth',2)
% plot(time_cc,ccAltRes_shuf,'c')
% plot(time_cc, ccAltRes_shuf_Mean,'c','Linewidth',2)
% axis([-.1 .1 -.5 1])
% title('Shuffled simultaneous')
% legend('prestim','','Residual','')
% xlabel('time (seconds)')
% ylabel('fraction shared')
% 
figure % power spectrum of mean traces
subplot(2,2,1)
plot(powerspec_xvalues, mean_powerspecExc,'g')
hold on
plot(powerspec_xvalues, mean_powerspecInh,'r')
plot(powerspec_xvalues, mean_powerspecAltExc,'b')
plot(powerspec_xvalues, mean_powerspecAltInh,'y')
h = gca ;
set(h,'XScale','log','YScale','log')
legend('exc sh', 'inh sh', 'exc alt', 'inh alt')
title('mean signal')

subplot(2,2,2) % transfer functions
plot(tf_x,Exc_TransFnc,'g')
hold on
plot(tf_x,Inh_TransFnc,'r')
h = gca ;
set(h,'XScale','log','YScale','log')
xlabel('frequency')
ylabel('gain')
title('transfer functions')

subplot(2,2,3) % power spectrum of residuals
plot(powerspec_xvalues, mean_powerspecExcRes,'g')
hold on
plot(powerspec_xvalues, mean_powerspecInhRes,'r')
plot(powerspec_xvalues, mean_powerspecAltExcRes,'b')
plot(powerspec_xvalues, mean_powerspecAltInhRes,'y')
h = gca ;
set(h,'XScale','log','YScale','log')
legend('exc sh', 'inh sh', 'exc alt', 'inh alt')
title('residuals')

% subplot(2,2,4) % difference of power spectra
% plot(powerspec_xvalues,Frac_powerspecShAltExcRes,'g')
% hold on
% plot(powerspec_xvalues,Frac_powerspecShAltInhRes,'r')
% h = gca ;
% set(h,'XScale','log','YScale','linear')
% legend(['exc',num2str(FracAssessed_ExcRes)],['inh',num2str(FracAssessed_InhRes) ])
%  
% identifier = ['LineCorrCoefExc',id,num2str(A)] ;
% ForIgor.(identifier) = MeanExcCorr(1,2) ; 
% 
% identifier = ['LineCorrCoefInh',id,num2str(A)] ;
% ForIgor.(identifier) = MeanInhCorr(1,2) ; 
% 
% identifier = ['LineSlopeExc',id,num2str(A)] ;
% ForIgor.(identifier) = MeanExcFitParams(1) ;
% 
% identifier = ['LineSlopeInh',id,num2str(A)] ;
% ForIgor.(identifier) = MeanInhFitParams(1) ;
% 
% identifier = ['LineStdCorrCoefExc',id,num2str(A)] ;
% ForIgor.(identifier) = StdExcCorr(1,2) ; 
% 
% identifier = ['LineStdCorrCoefInh',id,num2str(A)] ;
% ForIgor.(identifier) = StdInhCorr(1,2) ; 
% 
% identifier = ['LineStdSlopeExc',id,num2str(A)] ;
% ForIgor.(identifier) = StdExcFitParams(1) ; 
% 
% identifier = ['LineStdSlopeInh',id,num2str(A)] ;
% ForIgor.(identifier) = StdInhFitParams(1) ;
% 
% identifier = ['FracCapExc',id,num2str(A)] ;
% ForIgor.(identifier) = FracAssessed_Exc ;
% 
% identifier = ['FracCapInh',id,num2str(A)] ;
% ForIgor.(identifier) = FracAssessed_Inh ;
% 
% identifier = ['FracCapExcRes',id,num2str(A)] ;
% ForIgor.(identifier) = FracAssessed_ExcRes ;
% 
% identifier = ['FracCapInhRes',id,num2str(A)] ;
% ForIgor.(identifier) = FracAssessed_InhRes ;

% identifier = ['ccAltPreLag',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltPre_Lag ;
% 
% identifier = ['ccPreLag',id,num2str(A)] ;
% ForIgor.(identifier) = ccPre_Lag ;
% 
% identifier = ['ccShufPreLag',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltPre_shuf_Lag ;
% 
% identifier = ['ccAltResLag',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltRes_Lag ;
% 
% identifier = ['ccResLag',id,num2str(A)] ;
% ForIgor.(identifier) = ccRes_Lag ;
% 
% identifier = ['ccShufResLag',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltRes_shuf_Lag ;
% 
% identifier = ['ccAltPrePeak',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltPre_Peak ;
% 
% identifier = ['ccPrePeak',id,num2str(A)] ;
% ForIgor.(identifier) = ccPre_Peak ;
% 
% identifier = ['ccShufPrePeak',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltPre_shuf_Peak ;
% 
% identifier = ['ccAltResPeak',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltRes_Peak ;
% 
% identifier = ['ccResPeak',id,num2str(A)] ;
% ForIgor.(identifier) = ccRes_Peak ;
% 
% identifier = ['ccShufResPeak',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltRes_shuf_Peak ;

% identifier = ['ccPretime',id,num2str(A)] ;
% ForIgor.(identifier) = time_ccPre ;
% 
% identifier = ['ccAltPreMean',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltPre_Mean ;
% 
% identifier = ['ccPreMean',id,num2str(A)] ;
% ForIgor.(identifier) = ccPre_Mean ;
% 
% identifier = ['ccShufPreMean',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltPre_shuf_Mean ;
% 
% identifier = ['ccRestime',id,num2str(A)] ;
% ForIgor.(identifier) = time_cc ;
% 
% identifier = ['ccAltResMean',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltRes_Mean ;
% 
% identifier = ['ccResMean',id,num2str(A)] ;
% ForIgor.(identifier) = ccRes_Mean ;
% 
% identifier = ['ccShufResMean',id,num2str(A)] ;
% ForIgor.(identifier) = ccAltRes_shuf_Mean ;

% for a=1:size(ccAltPre,1) ; 
%     identifier = ['ccAltPre',num2str(a),id,num2str(A)] ;
%     ForIgor.(identifier) = ccAltPre(a,:) ;
%     
%     identifier = ['ccPre',num2str(a),id,num2str(A)] ;
%     ForIgor.(identifier) = ccPre(a,:) ;    
%     
%     identifier = ['ccShufPre',num2str(a),id,num2str(A)] ;
%     ForIgor.(identifier) = ccAltPre_shuf(a,:) ;
%     
%     identifier = ['ccAltRes',num2str(a),id,num2str(A)] ;
%     ForIgor.(identifier) = ccAltRes(a,:) ;
%     
%     identifier = ['ccRes',num2str(a),id,num2str(A)] ;
%     ForIgor.(identifier) = ccRes(a,:) ;    
%     
%     identifier = ['ccShufRes',num2str(a),id,num2str(A)] ;
%     ForIgor.(identifier) = ccAltRes_shuf(a,:) ;
% end

identifier = ['LineStdCorrCoefExc',id,num2str(A)] ;
ForIgor.(identifier) = StdExcCorr(2,3) ; 

identifier = ['LineStdCorrCoefInh',id,num2str(A)] ;
ForIgor.(identifier) = StdInhCorr(2,3) ; 

identifier = ['LineStdSlopeExc',id,num2str(A)] ;
ForIgor.(identifier) = StdExcRsiFitParams(1) ; 

identifier = ['LineStdSlopeInh',id,num2str(A)] ;
ForIgor.(identifier) = StdInhRsiFitParams(1) ;
end

      
    

