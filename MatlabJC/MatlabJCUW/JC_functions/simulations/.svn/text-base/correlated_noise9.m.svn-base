% this simulation will ...


%parameters
NoiseCom_Frac = [0:.25:1] ; % range of common noise fraction of total
NoiseTot_Var = .5 ; % var of total noise in each conductance
NumTrials = 10 ; % number of repeats 

params.Einh = -80 ;
params.Eexc = 0 ;
params.Eleak = -60 ;
params.cap = .06 ;%nF
params.Vthresh = -45 ;
params.AbsRef  = .002 ; %sec
params.RelRefTau = .008 ;%sec
params.RelRefAmp = 4 ; %mV
params.Gleak = 1 ;
params.SampleRate = 10000 ;

MaxDeltaTvector = 10.^[-3:.1:0] ; % sec vector of times shifts for max delta t

si = .0001 ; % sample interval (sec)
time = [0:si:10] ; % sec

lt = length(time) ;

excLF = simFilter([0:si:.3],.040,.009,.1,.10,.05,.02) ; % linear filters(time,tpeak,peakRise,peakAmp,ttrough,troughDecay,troughAmp)
inhLF = simFilter([0:si:.3],.05,.01,.1,.11,.06,.02) ;

NFgainExc = 1 ;
NFgainInh = 1 ;

NFthreshExc = 0 ;
NFthreshInh = 0 ;

NFmaxExc = 300 ;
NFmaxInh = 300 ;


% set signal
signal = normrnd(0,2,1,lt) ;     % signal
signal = lowPassFilter(signal,1/si,60) ;    % low pass at 60hz

Trial = 0 ;
spikes = zeros(NumTrials*length(NoiseCom_Frac),lt) ;

for a = 1:length(NoiseCom_Frac) ; % for each new change in common noise amplitude
    
    NoiseCom_Std = sqrt(NoiseTot_Var * NoiseCom_Frac(a)) ; % standard deviation of common noise
    NoiseInd_Std = sqrt(NoiseTot_Var - NoiseCom_Std^2) ; % standard deviation of independant noise
    
    for b=1:NumTrials ; % for each trial
        Trial = Trial + 1 ;
        
        NoiseCommon = normrnd(0,NoiseCom_Std,1,lt) ; % create noise for this trial
        NoiseExc = normrnd(0,NoiseInd_Std,1,lt) ;
        NoiseInh = normrnd(0,NoiseInd_Std,1,lt) ;
        
        NoiseCommon = lowPassFilter(NoiseCommon,1/si,1000) ; % low pass at 1000hz
        NoiseExc = lowPassFilter(NoiseExc,1/si,1000) ; % low pass at 1000hz
        NoiseInh = lowPassFilter(NoiseInh,1/si,1000) ; % low pass at 1000hz
        
        GexcPreLN = signal + NoiseCommon + NoiseExc ; % add signal and noise
        GinhPreLN = signal + NoiseCommon + NoiseInh ;

        % pass signal and noise through linear and nonlinear filters

        GexcPreN = conv(GexcPreLN,excLF) ; % convolve linear filter
        GinhPreN = conv(GinhPreLN,inhLF) ; % convolve linear filter
        
        % pass through nonlinear filter(threshold, gain, saturate)
        GexcPre = GexcPreN*NFgainExc - NFgainExc*NFthreshExc ; % gain
        GinhPre = GinhPreN*NFgainInh - NFgainExc*NFthreshInh ;
        
        GexcPre(GexcPreN<NFthreshExc) = 0 ; %threshold
        GinhPre(GinhPreN<NFthreshInh) = 0 ; %threshold
        
        GexcPre(GexcPre>NFmaxExc) = NFmaxExc ; % saturate
        GinhPre(GinhPre>NFmaxInh) = NFmaxInh ; 
        
        Gexc(Trial,:) = GexcPre(1,1:lt) ; % cut off convolution extra
        Ginh(Trial,:) = GinhPre(1,1:lt) ;
        Gleak = 0 ; % leak conductance
                
        V_trace(Trial,:) = LIFmodelG_c(Gexc(Trial,:),Ginh(Trial,:),params) ; % run LIF model
        spikes(Trial,V_trace(Trial,:)==50) = 1 ; % spike train
        spiketimes{Trial} = time(V_trace(Trial,:)==50) ; % spike times     
    end
    GexcMean(a,:) = mean(Gexc(Trial-NumTrials+1:Trial,:)) ; % mean Gexc for this particular set of trials
    GinhMean(a,:) = mean(Ginh(Trial-NumTrials+1:Trial,:)) ; % mean Ginh for this particular set of trials
    V_traceMean(a,:) = mean(V_trace(Trial-NumTrials+1:Trial,:)) ; % mean voltage for this particular set of trials
end

% get cross correlations of estimated noise (residuals), estimate and predict total current noise, measure voltage noise (only applicable for nonspiking) 
lcc = length(GexcMean)*2-1 ; % length of cc
ccX = ([1:lcc] - (lcc+1)/2)*si ; % x values of cc
ccZeroi = (lcc+1)/2 ; % index of zero time lag
for a = 1:length(NoiseCom_Frac) ; % for each new change in common noise amplitude
    for b = a*NumTrials-NumTrials+1:a*NumTrials ; % for each trial         
        GexcRes(b,:) = Gexc(b,:) - GexcMean(a,:) ; % residual
        GinhRes(b,:) = Ginh(b,:) - GinhMean(a,:) ; % residual
        VRes(b,:) = V_trace(b,:) - V_traceMean(a,:) ; % residual
        
        ccGRes(b,:) = xcorr(GexcRes(b,:),GinhRes(b,:)) ; % cross corr of residuals
        ccGResCoef(b,:) = xcorr(GexcRes(b,:),GinhRes(b,:),'coef') ; % cross corr of residuals       
        ccIRes(b,:) = xcorr(GexcRes(b,:)*(-45 - params.Eexc),GinhRes(b,:)*(-45 - params.Einh)) ; % cross corr of current residuals
        
        InoiseVarEst(b) = var(GexcRes(b,:)*(-45 - params.Eexc)+GinhRes(b,:)*(-45 - params.Einh)) ; % estimate variance of current noise
        InoiseVarPred(b) = mean(var(GexcRes(b,:)*(-45 - params.Eexc),[],2)) + mean(var(GinhRes(b,:)*(-45 - params.Einh),[],2)) + 2*ccIRes(b,ccZeroi)/lt ; % theoretical prediction based on cross correlation
        VnoiseVar(b) = var(VRes(b,:)) ; % variance of voltage
    end
    ccGResMean(a,:) = mean(ccGRes(a*NumTrials-NumTrials+1:a*NumTrials,:)) ; % cross correlation mean
    ccIResMean(a,:) = mean(ccIRes(a*NumTrials-NumTrials+1:a*NumTrials,:)) ; % cross correlation mean
    
    GexcVarMean(a) = mean(var(GexcRes(a*NumTrials-NumTrials+1:a*NumTrials,:),[],2)) ; % mean variance of gexc noise
    GinhVarMean(a) = mean(var(GinhRes(a*NumTrials-NumTrials+1:a*NumTrials,:),[],2)) ; % mean variance of ginh noise
    
    InoiseVarEstMean(a) = mean(InoiseVarEst(a*NumTrials-NumTrials+1:a*NumTrials)) ; % mean estimate of current noise variance
    InoiseVarPredMean(a) = mean(InoiseVarPred(a*NumTrials-NumTrials+1:a*NumTrials)) ; % mean estimate of current noise variance
    VnoiseVarMean(a) = mean(VnoiseVar(a*NumTrials-NumTrials+1:a*NumTrials)) ; % mean variance of voltage
end

ccGResCoefPeak = max(ccGResCoef,[],2) ; % peak of cc coef
ccGResCoefTrough = min(ccGResCoef,[],2) ; % trough of cc coef

% % check spike precision with spike match metric
% for a = 1:length(NoiseCom_Frac) ; % for each new change in common noise amplitude
%     [matrix,meanvector] = SpikeMatcher(spiketimes(a*NumTrials-NumTrials+1:a*NumTrials), MaxDeltaTvector) ;
%     SpkMIndPairs{a} = matrix ;
%     SpkMMean(a,:) = meanvector ; 
% end

% check spike precision with psth var metric
for a = 1:length(NoiseCom_Frac) ;
    [temp,psth] = PsthVar(spikes(a*NumTrials-NumTrials+1:a*NumTrials,:),10.^[-3:.1:0],1/si);
    sumPSTHvar(a,:) = temp ;
end

% % check spike precision with spike distance metric 
% for a = 1:length(NoiseCom_Frac) ; % for each new change in common noise amplitude
%     for b = a*NumTrials-NumTrials+1:a*NumTrials ; % for each trial
%         for c = a*NumTrials-NumTrials+1:a*NumTrials ; % for each possible pair
%             sd{a}(b,c)=spkd_c(spiketimes{b},spiketimes{c},length(spiketimes{b}), length(spiketimes{c}), .02); % runs spike distance function at a given cost
%         end
%     end
%     sd_Mean(a) = mean(sd{a}(sd{a}~=0)) ; % get the mean spike distance for a particular amplitude of common noise
% end

% fit a line to Inoise as a function of cc(0) 
bITheory = GexcVarMean(1)*(-45 - params.Eexc)^2 + GinhVarMean(1)*(-45 - params.Einh)^2 ; % the y intecept (when no correlation) variances sum

color = ['b','g','r','k','c','y','b','g','r','k','c','y'] ;

figure
for a = 1:length(NoiseCom_Frac) ; % for each new change in common noise amplitude   
    subplot(4,2,1:2)
    plot(NoiseCom_Frac(a),ccGResCoefPeak(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'*'])
    hold on
    plot(NoiseCom_Frac(a),ccGResCoefTrough(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'o'])
    xlabel('fraction common noise')
    ylabel('peak or trough of cc coef')
    legend('peak','Trough')
        
    subplot(4,2,3:4)
    plot(ccGResCoef(a*NumTrials-NumTrials+1:a*NumTrials,ccZeroi),InoiseVarEst(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'*'])
    hold on
    plot(ccGResCoef(a*NumTrials-NumTrials+1:a*NumTrials,ccZeroi),InoiseVarPred(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'o'])
    xlabel('cc coef (0)')
    ylabel('I noise variance estimate')
    legend('actual estimate', 'predicted')

    if params.Vthresh>50 ;
        subplot(4,2,5:6)
        plot(ccGResCoef(a*NumTrials-NumTrials+1:a*NumTrials,ccZeroi),VnoiseVar(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'*'])
        hold on
        xlabel('cc coef (0)')
        ylabel('V noise variance')
    else
        subplot(4,2,5)
        plot(MaxDeltaTvector,sumPSTHvar(a,:),[color(a),'-'])
        hold on
        plot(MaxDeltaTvector(8),sumPSTHvar(a,8),[color(a),'o'])
        xlabel('gaussian var (sec)')
        ylabel('sum time dependent PSTH var')
        h=gca ;
        set(h,'xscale','log')
        
        subplot(4,2,6)
        plot(InoiseVarPredMean(a),sumPSTHvar(a,8),[color(a),'o'])
        hold on
%         plot(InoiseVarPredMean(a),sumPSTHvar(a,11),[color(a),'*'])
%         plot(InoiseVarPredMean(a),sumPSTHvar(a,21),[color(a),'o'])
        xlabel('Inoise var pred')
        ylabel('sum time dependent PSTH var')
    end
        
    subplot(4,1,4)
    plot(ccX,ccGResCoef(a*NumTrials-NumTrials+1:a*NumTrials,:),[color(a)])
    hold on
    xlabel('lag (sec)')
    ylabel('cross corr coef')
end



figure
for a = 1:length(NoiseCom_Frac) ; % for each new change in common noise amplitude   
    subplot(4,1,1)
    plot(NoiseCom_Frac(a),ccGResCoefPeak(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'*'])
    hold on
    plot(NoiseCom_Frac(a),ccGResCoefTrough(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'o'])
    xlabel('fraction common noise')
    ylabel('peak or trough of cc coef')
    legend('peak','Trough')
        
    subplot(4,1,2)
    plot(ccGResCoef(a*NumTrials-NumTrials+1:a*NumTrials,ccZeroi),InoiseVarEst(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'*'])
    hold on
    plot(ccGResCoef(a*NumTrials-NumTrials+1:a*NumTrials,ccZeroi),InoiseVarPred(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'o'])
    xlabel('cc coef (0)')
    ylabel('I noise variance estimate')
    legend('actual estimate', 'predicted')

    if params.Vthresh>50 ;
        subplot(4,1,3)
        plot(ccGResCoef(a*NumTrials-NumTrials+1:a*NumTrials,ccZeroi),VnoiseVar(a*NumTrials-NumTrials+1:a*NumTrials),[color(a),'*'])
        hold on
        xlabel('cc coef (0)')
        ylabel('V noise variance')
    else
        subplot(4,1,3)
        plot(MaxDeltaTvector,SpkMMean(a,:),[color(a),'-'])
        hold on
        xlabel('time shift (sec)')
        ylabel('percent of spikes that can be matched')
        h=gca ;
        set(h,'xscale','log')
    end
        
    subplot(4,1,4)
    plot(ccX,ccGResCoef(a*NumTrials-NumTrials+1:a*NumTrials,:),[color(a)])
    hold on
    xlabel('lag (sec)')
    ylabel('cross corr coef')
end

subplot(4,1,2)
plot(ccGResCoef(:,ccZeroi),-bITheory*ccGResCoef(:,ccZeroi)+bITheory,'k--') 


figure
for a = 1:length(NoiseCom_Frac) ; % for each new change in common noise amplitude
    subplot(1,3,1)
    plot(NoiseCom_Frac(a),InoiseVarEstMean(a),[color(a),'*'])
    hold on
    xlabel('fraction of noise which is common')
    ylabel('mean variance I estimate')
    
    subplot(1,3,2)
    plot(NoiseCom_Frac(a),sd_Mean(a),[color(a),'*'])
    hold on
    xlabel('fraction of noise which is common')
    ylabel('mean spike distance')

    subplot(1,3,3)
    hold on
    plot(ccX,ccGResMean(a,:),color(a))
end



figure
plot(time,signal)
hold on
plot(time,NoiseCommon + NoiseExc,'r') ;

figure
plot(time,Gexc(1,:))
hold on
plot(time,Ginh(1,:),'r')

figure
plot(time,Gexc(end,:))
hold on
plot(time,Ginh(end,:),'r')



        

