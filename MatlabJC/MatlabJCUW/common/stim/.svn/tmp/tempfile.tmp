classdef SpatialStimulus < handle
    properties
        inputParamsDir = '/Users/Shared/SpatialStimParams/'
        inputParamsFile = 'TempParams.h5'
        %savedParamsDir = '/Users/Greg/acquisition/'
        %savedParamsDir = '/Users/Shared/SpatialStimDataFiles/'
        MatlabCodeDir = '~/matlab/common/stim/'
        GammaTableFileName = 'gamma_table.mat'
        tempFile = 'temp'
        screenX = 800;
        screenY = 600;
        repositoryVersion
        frameRate = 60; %frames / sec
        windPtr
        imageArray = [];
        movieFrames
        gammaTable
    end
    
    methods
        
        function self = SpatialStimulus(varargin)
            %load gamma table
            temp = load([self.MatlabCodeDir self.GammaTableFileName]);
            self.gammaTable = temp.gamma;
            
            if isempty(varargin) || strcmp(varargin{1}, 'test') %stimulus run loop
                %get repositoryVersion    
                try
                    curDir = pwd;
                    cd(self.MatlabCodeDir);
                    [err, changedFiles] = unix('svn status');
                    if ~isempty(changedFiles)
                        disp('Warning: stimulus files have changed since last revision');
                        disp(changedFiles);
                    end
                    [err, rev_str] = unix('svn info | grep Revision');
                    [null, revNum] = strtok(rev_str);
                    self.repositoryVersion = str2double(revNum);
                    cd(curDir);
                catch
                    disp('Error getting repository information');
                    self.repositoryVersion = -1;
                end
                
                %stim screen is 1
                %self.windPtr = Screen('OpenWindow', 1, [0, 0, 0], [0, 0, self.screenX, self.screenY]);
                if isempty(varargin) %normal run loop
                    self.windPtr = Screen('OpenWindow',1);
                else %test run loop
                    if nargin==2
                        self.screenX = varargin{2}(1);
                        self.screenY = varargin{2}(2);
                    else
                        self.screenX = 200;
                        self.screenY = 150;
                    end
                    rect = Screen('rect',0);                    
                    self.windPtr = Screen('OpenWindow',0,[0, 0, 0], [0, rect(4)-self.screenY, self.screenX*2, rect(4)]);
                end
                
                %set both screens to black
                blankPtr=Screen('MakeTexture', self.windPtr, 0);
                Screen('DrawTextures', self.windPtr, blankPtr, ...
                    [], [0, 0, self.screenX, self.screenY; self.screenX, 0, self.screenX*2, self.screenY]', 0, 0);
                Screen('Flip',self.windPtr);
                Screen('Close', blankPtr);
                self.displayLoop;
            elseif strcmp(varargin{1}, 'WriteDefaults')
                stimClass = varargin{2};
                props = properties(stimClass);
                params = struct;
                for i=1:length(props)
                    params.(props{i}) = 0; %maybe read deafult from file
                end
                params.stimClass = stimClass;
                fileName = [stimClass, '_params.h5'];
                hdf5save([self.inputParamsDir fileName],'params','params');                                
            elseif strfind(varargin{1}, 'getFrame') %get image array of single frame or all frames
                paramsStruct = varargin{2};             
                writeAvi = 0;
                
                %for now do this with an onscreen window, eventually use an
                %offscreen window
                tempPtr = Screen('OpenWindow',0,[0, 0, 0], [0, 0, self.screenX, self.screenY]);
                
                %add parameters from this class
                paramsStruct.screenX = self.screenX;
                paramsStruct.screenY = self.screenY;
                paramsStruct.repositoryVersion = self.repositoryVersion;
                paramsStruct.gammaTable = self.gammaTable;
                
                %initialize display function with params struct                
                StimClass = eval([paramsStruct.stimClass '(tempPtr, paramsStruct)']);
                %initialize the stimulus
                err = StimClass.init;
                if err, disp('Stimulus Initialization Error'); end                
                
                if strcmp(varargin{1}, 'getFrame') %just one frame
                    %warning: rand number state will be wrong!

                    frameNum = varargin{3};
                    %get the texture for the correct frame
                    StimClass.frameCounter = frameNum;
                    drawParams=StimClass.nextFrame;
                    texturePtr = drawParams.tex;
                    %draw frame
                    Screen('DrawTexture', tempPtr, texturePtr, ...
                        [], [0, 0, self.screenX, self.screenY], 0, 0);
                    
                    %get the image array (RGB)
                    imageArray = Screen('getImage',tempPtr);
                    
                    %take only the first level (for B&W)
                    self.imageArray = squeeze(imageArray(:,:,1)');
                else %all frames
                    %get nFrames
                    nFrames = paramsStruct.spatial_prepts + paramsStruct.spatial_stimpts + paramsStruct.spatial_postpts;
                    self.imageArray = uint8(zeros(self.screenX, self.screenY, nFrames));
                                        
                    if length(varargin)==3
                        writeAvi = 1;
                        movie_filename = varargin{3};
                        self.movieFrames = repmat(struct('cdata',[],'colormap',[]),1,nFrames);
                    end
                    
                    for i=1:nFrames
                        %i
                        %get next frame from stim class
                        drawParams=StimClass.nextFrame;
                        texturePtr = drawParams.tex;
                        if isfield(drawParams,'rotationAngle')
                            rotationAngle = drawParams.rotationAngle;
                        else
                            rotationAngle = 0;
                        end
                        if ~texturePtr %error
                            disp('Stimulus Error');
                            break;
                        end
                        %draw frame
                        Screen('DrawTexture', tempPtr, texturePtr, ...
                            [], [0, 0, self.screenX, self.screenY], rotationAngle, 0);
                        
                        %get the image array (RGB)
                        imageArray = Screen('getImage',tempPtr);
                        
                        Screen('Flip',tempPtr);
                        
                        %keyboard;
                        %take only the first level (for B&W)
                        self.imageArray(:,:,i) = squeeze(imageArray(:,:,1)'); %#ok<PROP>
                        if writeAvi, self.movieFrames(i) = im2frame(imageArray); end
                        %Screen('Close', texturePtr) %textures
                    end
                end
                if writeAvi
                    %write movie file
                    movie2avi(self.movieFrames,movie_filename,'fps',self.frameRate);
                end
                
                %Clear teture and close screen
                Screen('Close') %textures
                Screen('CloseAll') %screens
            end
        end
        
        function displayLoop(self)        
            err = 0;
            %delete temp file if it exists
            if exist([self.inputParamsDir,self.tempFile], 'file')
                delete([self.inputParamsDir,self.tempFile]);
            end
            while ~err
                
                %wait for params file by checking if temp file exists
                fpath = [self.inputParamsDir self.inputParamsFile];
                waitForFileExist(self.inputParamsDir,self.tempFile);
                
                %hack: waiting fot IGOR to init
                Priority(0);  
                pause(.2);
                Priority(5);
                
                %load params struct
                tempVar = hdf5load(fpath);
                paramsStruct = tempVar.params;
                
                %check if this is the 'quit' stimulus
                %eventually, let's find a better way to quit
                if strcmp(paramsStruct.stimClass,'quit')
                    break;
                end
                
                %add parameters from this class
                paramsStruct.screenX = self.screenX;
                paramsStruct.screenY = self.screenY;
                paramsStruct.repositoryVersion = self.repositoryVersion;
                paramsStruct.gammaTable = self.gammaTable;
                
                %initialize display function with params struct
                windPtr = self.windPtr;
                StimClass = eval([paramsStruct.stimClass '(windPtr, paramsStruct)']);
                      
                %initialize the stimulus
                err = StimClass.init;
                if err
                    disp('Stimulus Initialization Error');
                    break;
                end   
                
                %if saveON, append to data file
                if paramsStruct.saveON == 1            
                    %strip off fields we don't want to save
                    %get flle path and name, save by epoch name
                    DataFilePath = regexprep(paramsStruct.dataFileName, ':', '/'); %fix IGOR path issues
                    
                    fieldsToRemove = {'saveON', 'InitStimulusSequence', 'NumCycles', 'gammaTable', 'dataFileName'};
                    paramsStruct = rmfield(paramsStruct,fieldsToRemove);        
                   
                    %get flle path and name, save by epoch name
                    [data_path, fname] = fileparts(DataFilePath);
                    dataFileName = ['/Volumes/' data_path '/' fname '_spatial.h5'];
                    epochParamsName = ['params_epoch' num2str(paramsStruct.epochNumber)];                    
                    eval([epochParamsName '= paramsStruct;']);
                    hdf5append(dataFileName,epochParamsName,epochParamsName);
                end
                 
                %get nFrames
                nFrames = paramsStruct.spatial_prepts + paramsStruct.spatial_stimpts + paramsStruct.spatial_postpts;
                
                %display:
                %first set priority
                %set priority
                priorityLevel=MaxPriority(windPtr);
                Priority(priorityLevel);  
                         
                tic;
                %for each frame
                tic
                for i=1:nFrames
                    %get next frame from stim class
                    drawParams=StimClass.nextFrame;
                    %get the texture
                    texturePtr = drawParams.tex;
                    %get other params
                    if isfield(drawParams,'rotationAngle')
                        rotationAngle = drawParams.rotationAngle;
                    else
                        rotationAngle = 0;
                    end
                    if ~texturePtr %error
                        disp('Stimulus Error');
                        err = 1;
                        break;
                    end
                    
                    %make "code" texture for secondary monitor
                    codeGreyLevel = round((61 - rem(i,60))*255/60);   
                    codeTexturePtr=Screen('MakeTexture', self.windPtr, codeGreyLevel); 

                    %draw both
                    Screen('DrawTextures', windPtr, [texturePtr, codeTexturePtr], ...
                        [], [0, 0, self.screenX, self.screenY; self.screenX, 0, self.screenX*2, self.screenY]', [rotationAngle;0], 0);
                    Screen('Flip',windPtr);
                    %close the code texture pointer
                    %maybe have an option here to close the other texture
                    %pointers - might be needed for long stimuli
                    Screen('Close', codeTexturePtr);
                end
<<<<<<< .mine
                toc/nFrames
=======
                totalTime = toc;
                disp(['Mean Frame Time = ' num2str((totalTime / nFrames) * 1000) ' ms']);
>>>>>>> .r284
                
                %make sure code frame is set back to black
                codeGreyLevel = 0;   
                codeTexturePtr=Screen('MakeTexture', self.windPtr, codeGreyLevel); 
                Screen('DrawTextures', windPtr, [texturePtr, codeTexturePtr], ...
                        [], [0, 0, self.screenX, self.screenY; self.screenX, 0, self.screenX*2, self.screenY]', [rotationAngle;0], 0);
                Screen('Flip',windPtr);
                
                %reset priority
                Priority(0);
                
                %Clear textures
                Screen('Close');
                
            end %infinite loop for now
            
            %clear screen
            Screen('CloseAll');            
        end %displayLoop
        
    end %methods
end %class