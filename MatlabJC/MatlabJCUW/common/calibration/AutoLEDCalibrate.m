function ReturnedCellInfo = AutoLEDCalibrate(CellInfo, AllSpectra, SpotSize)%	ReturnedCellInfo = LEDCalibration(CellInfo,SpotSize)%  % Take LED calibration information in CellInfo and LED and photoreceptor% spectra in specified .mat file and compute stimulus intensity and strength% for each stimulus type delivered.  Store this information in UserInfo in% the form of a vector that gives photon flux or density at wavelength of% peak sensitivity for rods and each cone type.%%   Created 8/08 FMR based on previous version and on%   PhotoisomerizationRates.m.%ScFact = 6.6e-34 * 3e8;         % for converting between energy and quantaVoltsPerDACCount = 20.470 / 65536;LEDSpectraLocations = {'red', 'green', 'blue'};load(AllSpectra);% see what we have in CellInfoepocheck = 0;famcheck = 0;if isfield(CellInfo, 'EpochCondition')    epocheck = 1;endif isfield(CellInfo, 'FamilyCondition')     famcheck = 1;endcellcheck = 1;if epocheck == 1 & famcheck == 0    NumSingleConditions = length(CellInfo.EpochCondition);    tempinfo = CellInfo.EpochCondition;elseif epocheck == 0 & famcheck == 1    NumSingleConditions = length(CellInfo.FamilyCondition);    tempinfo = CellInfo.FamilyCondition;elseif epocheck == 1 & famcheck == 1    famcheck = 2;    NumSingleConditions = length(CellInfo.EpochCondition);    tempinfo = CellInfo.EpochCondition;else    error('No Family or EpochConditions available');endReturnedCellInfo = CellInfo;% main loop - go through each condition to calibratewhile cellcheck == 1    for condition = 1:NumSingleConditions        % which setting for this epoch or family condition?        if (isfield(tempinfo(condition), 'Setting') == 0)            tempinfo(condition).ScaleFactorIndex = 1;        end                % which output active?        OutputChan = FindSearchPara(tempinfo(condition), 'OutputChan');        OutputField = [];        if isempty(OutputChan)            [OutputChan,OutputField,FindFlag] = FindFamPara(tempinfo(condition), 'OutputChan');        end        LEDType = CellInfo.OutputConfiguration{OutputChan + 1};        for led = 1:length(LEDSpectraLocations)            if (strcmp(LEDSpectraLocations{led}, LEDType))                LEDIndex = led+1;            end        end        LEDIndex                % make sure this is valid condition to calibrate - else skip        if (strcmpi(LEDType, 'amp') == 0)            if iscell(CellInfo.OutputScaleFactor)                if (isnumeric(CellInfo.OutputScaleFactor{OutputChan + 1})) % added 1/13/2005                    UDTPowerIndex = CellInfo.OutputScaleFactor{OutputChan + 1};                else                    UDTPowerIndex = str2num(CellInfo.OutputScaleFactor{OutputChan + 1});                end            else                UDTPowerIndex = CellInfo.OutputScaleFactor(OutputChan + 1);            end            UDTPower = UDTPowerIndex(tempinfo(condition).ScaleFactorIndex);            if iscell(CellInfo.NDFConfiguration)                NDF = CellInfo.NDFConfiguration{OutputChan + 1};            else                NDF = CellInfo.NDFConfiguration(OutputChan + 1);            end            UDTPower = UDTPower * 10^-9;            % convert quantal LED spectra to energy spectra and apply udt factors, then convert back to quantal spectra,            % now in absolute units            LEDEnergySpectra(:, 1) = LEDQuantalSpectra(:, 1);            LEDEnergySpectra(:, 2) = LEDQuantalSpectra(:, LEDIndex) ./ LEDQuantalSpectra(:, 1);            LEDPow = sum(LEDEnergySpectra(:, 2)) * (LEDEnergySpectra(2, 1) - LEDEnergySpectra(1, 1));            LEDEnergySpectra(:, 2) = LEDEnergySpectra(:, 2) * UDTPower / LEDPow;            Spectra(:, 2) = LEDEnergySpectra(:, 2) .* LEDEnergySpectra(:, 1) * 1e-9 / (ScFact * SpotSize(OutputChan));            % multiply LED spectra by photoreceptor spectra            DACCount = FindSearchPara(tempinfo(condition), 'StmAmp');            if (famcheck == 1)                [DACCount,DACCntField] = FindFamPara(tempinfo(condition), 'StmAmp');            end            if (isempty(DACCount) == 0)			% flag those conditions without a StmAmp                StimAmp = DACCount * VoltsPerDACCount;                clear ConePhotonFlux                for i = 1:size(ConeQuantalSpectra, 2)-1                    ConePhotonFlux(i, :) = sum(Spectra(:, 2) .* ConeQuantalSpectra(:, i+1)) * StimAmp;                end                RodPhotonFlux = sum(Spectra(:, 2) .* RodQuantalSpectra(:, 2)) * StimAmp;                StimDur = FindSearchPara(tempinfo(condition), 'StimDur');                if isempty(StimDur)                    StimDur = FindFamPara(tempinfo(condition), 'StimDur');                end                SampInterv = FindSearchPara(tempinfo(condition), 'SampInterv') * 1e-6;                if isempty(SampInterv)                    SampInterv = FindFamPara(tempinfo(condition), 'SampInterv') * 1e-6;                end                StimulusDuration = StimDur*SampInterv;                if (famcheck ~= 1)                    CellInfo.EpochCondition(condition).UserInfo.ConeStimulusStrength = ConePhotonFlux * StimulusDuration;                    CellInfo.EpochCondition(condition).UserInfo.ConeStimulusIntensity = ConePhotonFlux;                    CellInfo.EpochCondition(condition).UserInfo.RodStimulusStrength = RodPhotonFlux * StimulusDuration;                    CellInfo.EpochCondition(condition).UserInfo.RodStimulusIntensity = RodPhotonFlux;                elseif (famcheck == 1)                    CellInfo.FamilyCondition(condition).UserInfo.ConeStimulusStrength = ConePhotonFlux * StimulusDuration;                    CellInfo.FamilyCondition(condition).UserInfo.ConeStimulusIntensity = ConePhotonFlux;                    CellInfo.FamilyCondition(condition).UserInfo.RodStimulusStrength = RodPhotonFlux * StimulusDuration;                    CellInfo.FamilyCondition(condition).UserInfo.RodStimulusIntensity = RodPhotonFlux;                end            end        end    end    if famcheck == 2        famcheck = 1;        NumSingleConditions = length(CellInfo.FamilyCondition);        tempinfo = CellInfo.FamilyCondition;    else        cellcheck = 0;    endendReturnedCellInfo = CellInfo;