% SaveAllPhotoreceptorSpectra.m%%   This routine takes as input measured photoreceptor spectral%   sensitivities and produces as output a .mat file containing%   interpolated spectra based on nomogram fits to original measurements.  %% Created 8/08 FMR%   Based on previous SaveAllSpectra, but significantly modified to be more%   general.%%% load original photoreceptor spectraUseNomogramFit = 1;% load macaque rod spectra - these are energy spectral sensitivitiesload macaque-rod-spectraStartWaveLen = 370;EndWaveLen = 730;StepWaveLen = 1;% fit nomogram to spectral sensitivityif (UseNomogramFit)	Spectra = MacaqueRodQuantalSpectraLog(:, 2);	Wavelengths = MacaqueRodQuantalSpectraLog(:, 1);	coef = {1 -4 -100 -200 5000 -5000 500 200};	coef = cat(1, coef{:});	fitcoef = nlinfit(Wavelengths, Spectra, 'nomogram', coef);	fit = nomogram(fitcoef, Wavelengths);	plot(Wavelengths, Spectra, Wavelengths, fit);	Wavelengths = 1:(EndWaveLen - StartWaveLen+1)/StepWaveLen;	Wavelengths = Wavelengths * StepWaveLen + StartWaveLen-1;	fit = nomogram(fitcoef, Wavelengths');	plot(Wavelengths, fit, MacaqueRodQuantalSpectraLog(:, 1), MacaqueRodQuantalSpectraLog(:, 2), 'o');	% convert to quantal spectral sensitivities and normalize	MacaqueRodQuantalSpectra = MacaqueRodQuantalSpectraLog;	clear MacaqueRodQuantalSpectra;	MacaqueRodQuantalSpectra(:, 1) = Wavelengths(:);	MacaqueRodQuantalSpectra(:, 2) = 10.^fit(:);	MacaqueRodQuantalSpectra(:, 2) = MacaqueRodQuantalSpectra(:, 2) / max(MacaqueRodQuantalSpectra(:, 2));else	MeasRodSpectra = MacaqueRodQuantalSpectraLog;end	figure(1); clf;plot(MacaqueRodQuantalSpectra(:, 1), MacaqueRodQuantalSpectra(:, 2));hold onplot(MacaqueRodQuantalSpectraLog(:, 1), 10.^MacaqueRodQuantalSpectraLog(:, 2), 'o');load macaque-cone-spectrafigure(2);plot(MacaqueConeQuantalSpectra(:, 1), MacaqueConeQuantalSpectra(:, 4), MacaqueConeQuantalSpectra(:, 1), MacaqueConeQuantalSpectra(:, 3), MacaqueConeQuantalSpectra(:, 1), MacaqueConeQuantalSpectra(:, 2));save macaque-quantal-spectra MacaqueConeQuantalSpectra MacaqueRodQuantalSpectra%%% ndf values - note these are attenuation factors for each led rather than% spectra - easier to calibrate this wayndffid = fopen('ndf.txt', 'r');% find ndf values from fileTextLine = fgetl(ndffid);TargetTextLine = 'red 4';while (isempty(strfind(TextLine, TargetTextLine)))    TextLine = fgetl(ndffid);    if (TextLine == -1)        break;    endendNDFParameters = sscanf(TextLine(6:length(TextLine)), '%f %f');ndf.red4 = NDFParameters(2) / NDFParameters(1);fseek(ndffid, 0, 'bof');TextLine = fgetl(ndffid);TargetTextLine = 'red 2';while (isempty(strfind(TextLine, TargetTextLine)))    TextLine = fgetl(ndffid);    if (TextLine == -1)        break;    endendNDFParameters = sscanf(TextLine(6:length(TextLine)), '%f %f');ndf.red2 = NDFParameters(2) / NDFParameters(1);fseek(ndffid, 0, 'bof');TextLine = fgetl(ndffid);TargetTextLine = 'green 4';while (isempty(strfind(TextLine, TargetTextLine)))    TextLine = fgetl(ndffid);    if (TextLine == -1)        break;    endendNDFParameters = sscanf(TextLine(8:length(TextLine)), '%f %f');ndf.green4 = NDFParameters(2) / NDFParameters(1);fseek(ndffid, 0, 'bof');TextLine = fgetl(ndffid);TargetTextLine = 'green 2';while (isempty(strfind(TextLine, TargetTextLine)))    TextLine = fgetl(ndffid);    if (TextLine == -1)        break;    endendNDFParameters = sscanf(TextLine(8:length(TextLine)), '%f %f');ndf.green2 = NDFParameters(2) / NDFParameters(1);fseek(ndffid, 0, 'bof');TextLine = fgetl(ndffid);TargetTextLine = 'blue 4';while (isempty(strfind(TextLine, TargetTextLine)))    TextLine = fgetl(ndffid);    if (TextLine == -1)        break;    endendNDFParameters = sscanf(TextLine(8:length(TextLine)), '%f %f');ndf.blue4 = NDFParameters(2) / NDFParameters(1);fseek(ndffid, 0, 'bof');TextLine = fgetl(ndffid);TargetTextLine = 'blue 2';while (isempty(strfind(TextLine, TargetTextLine)))    TextLine = fgetl(ndffid);    if (TextLine == -1)        break;    endendNDFParameters = sscanf(TextLine(8:length(TextLine)), '%f %f');ndf.blue2 = NDFParameters(2) / NDFParameters(1);save led-ndf ndf%%% LED spectraclear ResampledLEDSpectra LEDQuantalSpectra;% load measured led spectra from ascii files - from CVI these are quantal spectraload red.txtload blue.txtload green.txtload dark.txt%load reddark.txt% pack into matrixLEDQuantalSpectra(:, 1) = blue(:, 1);LEDQuantalSpectra(:, 2) = red(:, 2) - dark(:, 2);LEDQuantalSpectra(:, 3) = green(:, 2) - dark(:, 2);LEDQuantalSpectra(:, 4) = blue(:, 2) - dark(:, 2);% resample led spectra so they are at same points as rod spectraResampleFact = 1;ResampledLEDSpectra(:, 1) = decimate(LEDQuantalSpectra(:, 1), ResampleFact);ResampledLEDSpectra(:, 2) = decimate(LEDQuantalSpectra(:, 2), ResampleFact);ResampledLEDSpectra(:, 3) = decimate(LEDQuantalSpectra(:, 3), ResampleFact);ResampledLEDSpectra(:, 4) = decimate(LEDQuantalSpectra(:, 4), ResampleFact);StartWaveLen = 370;EndWaveLen = 730;StepWaveLen = 1;clear Spectra;LEDQuantalSpectra = InterpolateNByFour(ResampledLEDSpectra, StartWaveLen, EndWaveLen, StepWaveLen);figure(1);plot(LEDQuantalSpectra(:, 1), LEDQuantalSpectra(:, 4), LEDQuantalSpectra(:, 1), LEDQuantalSpectra(:, 3), LEDQuantalSpectra(:, 1), LEDQuantalSpectra(:, 2));axis tight;save SuctionSpectra LEDQuantalSpectra%%% generate combined file for use with AutoLEDCalibrate and its relativesload SuctionSpectraload led-ndfload macaque-quantal-spectraConeQuantalSpectra = MacaqueConeQuantalSpectra;RodQuantalSpectra = MacaqueRodQuantalSpectra;save allSpectraRigC LEDQuantalSpectra ndf ConeQuantalSpectra RodQuantalSpectra